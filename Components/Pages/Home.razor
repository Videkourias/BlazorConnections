@page "/"
@inject INYTService _nytService

<PageTitle>BlazorConnections</PageTitle>

<MudPaper Height="85vh" Elevation="0">
    <MudContainer Class="pt-2">
        <MudContainer Class="d-flex gap-4 align-center">
            <MudText Class="title">Connections</MudText>
            <MudDatePicker Label="Game Date" @bind-Date="ConnectionDate" @bind-Date:after="ConnectionDateUpdate" IsDateDisabledFunc="@((DateTime dt)=>(dt < new DateTime(2023, 6, 12) || DateOnly.FromDateTime(dt) > DateOnly.FromDateTime(DateTime.Now.AddDays(1))))"/>
        </MudContainer>
    </MudContainer>
    <MudDivider DividerType="DividerType.Middle" Class="my-6"/>
 
    <MudContainer Class="d-flex flex-column justify-start align-center" Style="height: 60%"> 
        @if(Connection is not null) 
        {
                @if(IsGameOver && !IsFinishedConnectionShown)
                {
                    <MudButton Variant="Variant.Text" Class="rounded-pill" OnClick="() => IsFinishedConnectionShown = true" EndIcon="@Icons.Material.Filled.Close" Style="align-self: flex-end;">Back to puzzle</MudButton>
                    <MudStack>
                        <MudText Typo="Typo.h1">@Connection.GetCompletionMessage()!</MudText>
                        <MudContainer style="max-width: 12em;">
                            <MudGrid Spacing="1" Justify="Justify.Center">
                                @foreach(var guess in Guesses)
                                {
                                    foreach(var word in guess.Words)
                                    {
                                        string style = "width: 2em; height:2em; background-color: " + word.Item2 switch
                                        {
                                            Difficulty.Yellow => "rgb(249, 223, 109)",
                                            Difficulty.Green => "rgb(160, 195, 90)",   
                                            Difficulty.Blue => "rgb(176, 196, 239)",
                                            Difficulty.Purple => "rgb(186, 129, 197)",
                                            _ => ""
                                        };
                                        <MudItem xs="3">
                                            <MudPaper Elevation="0" Style=@style>
                                            </MudPaper>
                                        </MudItem>
                                    }
                                }
                            </MudGrid>
                        </MudContainer>
                    </MudStack>
                }
                else
                {            
                    <MudStack>
                        <MudContainer Class="d-flex justify-center align-center">
                            <h2>Create four groups of four!</h2>
                        </MudContainer>   
                        <MudGrid Spacing="3">
                            <MudPopover OverflowBehavior="OverflowBehavior.FlipNever" Open="@IsPopoverOpen" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.TopCenter" Class="pa-2 popoverHint" Square="false" DropShadow="false">
                                <p>@PopoverMessage</p>
                            </MudPopover>

                            @foreach(var wordGroup in Connection.Groups.Where(x => x.Completed).OrderBy(x => x.TimeCompleted)) //Display already completed groups
                            {
                                string style = "background-color: " + wordGroup.Difficulty switch
                                {
                                    Difficulty.Yellow => "rgb(249, 223, 109)",
                                    Difficulty.Green => "rgb(160, 195, 90)",   
                                    Difficulty.Blue => "rgb(176, 196, 239)",
                                    Difficulty.Purple => "rgb(186, 129, 197)",
                                    _ => ""
                                };
                                <MudItem xs="12" Style="height: 8em">
                                    <MudPaper Elevation="0" Class="rounded pa-4 d-flex justify-center align-center wordCard" Style=@style>
                                        <MudStack Spacing="0" AlignItems="AlignItems.Center">
                                            <MudText Class="correctWordCategory nytArial">@wordGroup.GroupName</MudText>
                                            <MudStack Row Justify="Justify.Center" Spacing="1">
                                                @{
                                                    var lastWord = wordGroup.Words.Last();
                                                } 
                                                @foreach(var word in wordGroup.Words)
                                                {
                                                    <MudText Class="correctWord nytArial" Style="">@word.Value@(word.Equals(lastWord) ? "" : ",")</MudText>
                                                }
                                            </MudStack>
                                        </MudStack>
                                    </MudPaper>
                                </MudItem>
                            }
                        
                            @foreach(var word in Connection.WordList) //Display non-matched words
                            {
                                string paperClass = "rounded pa-4 d-flex justify-center align-center wordCard" 
                                                        + (Connection.FourWordsSelected ? (word.IsSelected ? " cursor-pointer" : "") : " cursor-pointer") //Determine if word has pointer cursor on hover
                                                        + (word.IsSelected ? " selected" : ""); //Determine if word has selected stylings

                                <MudItem xs="3" Style="height: 8em">
                                    <MudPaper Elevation="0" Class="@paperClass" @onclick="() => SelectWord(word.Value)">
                                        <MudText Class="noSelect wordCardText nytArial">@word.Value</MudText>
                                    </MudPaper>
                                </MudItem>
                            }
                            
                        </MudGrid>  
                        @if(!IsGameOver)
                        {
                            <MudContainer Class="d-flex flex-row justify-center align-end gap-1">
                            <MudText>Mistakes Remaining: </MudText>
                                @for(int i = 0; i < Connection.Chances; i++)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Dark" Size="Size.Small"></MudIcon>
                                }
                            </MudContainer>
                        }
                        <MudContainer Class="d-flex flex-row justify-center align-start gap-2">
                            @if(IsGameOver)
                            {
                                <MudButton Variant="Variant.Outlined" Class="rounded-pill mud-border-black" OnClick="() => IsFinishedConnectionShown = false">View Results</MudButton>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Outlined" Class="rounded-pill mud-border-black" OnClick="Shuffle">Shuffle</MudButton>
                                <MudButton Variant="Variant.Outlined" Class="rounded-pill" OnClick="DeselectAll" Disabled="!Connection.AnySelected">Deselect All</MudButton>
                                <MudButton Variant="Variant.Filled" Class="rounded-pill" Disabled="!Connection.FourWordsSelected || SubmitDisabled" OnClick="Submit">Submit</MudButton>
                            }
                        </MudContainer>  
                    </MudStack>
                }
                
        }
        else
        {
            if(IsApiDataBeingRetrieved)
            {
                <MudProgressCircular Indeterminate />
            }
            else
            {
                @if(string.IsNullOrWhiteSpace(ApiExceptionMessage))
                {
                    <MudText>Select a date to play!</MudText>
                }
                else
                {
                    <MudText>NYT Connections API Error: @ApiExceptionMessage</MudText>
                }
            }
        }
    </MudContainer>
</MudPaper>

<style>
    .title{
        font-family: "nyt-karnakcondensed";
        font-size: 42px;
        font-weight: 700;
    }

    .wordCard{
        height: 100%;
        background-color: #efefe6;
        color: #121212; 
        transition: 0.2s all;
    }

    .wordCard.selected{
        background-color: #5a594e;
        color: #f8f8f8;
    }

    .wordCard .wordCardText{
        font-size: 20pt; 
        font-weight: 700;
        text-transform: uppercase;
    }


    .popoverHint{
        background-color: #1d1d1e;
        color: white;
    }

    .nytArial{
        font-family: "nyt-franklin", Arial;
    }

    .correctWord{
        font-weight: 500;
        font-size: 20px;
    }

    .correctWordCategory{
        font-weight: 700;
        font-size: 20px;
    }

    .noSelect {
        -webkit-touch-callout: none; /* iOS Safari */
        -webkit-user-select: none; /* Safari */
        -khtml-user-select: none; /* Konqueror HTML */
        -moz-user-select: none; /* Old versions of Firefox */
        -ms-user-select: none; /* Internet Explorer/Edge */
         user-select: none; /* Non-prefixed version, currently
                                    supported by Chrome, Edge, Opera and Firefox */
    }
</style>

@code{

    private Connection? Connection { get; set; }
    private DateTime? ConnectionDate { get; set; } = DateTime.Now;
    private bool SubmitDisabled = false;
    
    private List<Guess> Guesses { get; set; } = new();

    private string PopoverMessage {get; set; } = string.Empty;
    private bool IsPopoverOpen { get; set; } = false;
    private bool IsFinishedConnectionShown = false; //Used to determine if user is viewing the finished connection after win/lose screen
    private bool IsGameOver = false;
    private bool IsApiDataBeingRetrieved = false; // Show loader when true
    private string? ApiExceptionMessage; //Exception message received on attempt to retrieve data from NYT connections API



    //May want to switch to non prerendering, this adds noticeable delay    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender)
        {
            return;
        }

        await GetConnection();
        StateHasChanged();
    }

    private async Task GetConnection()
    {
        Connection = null;
        IsApiDataBeingRetrieved = true;
        StateHasChanged();

        if(ConnectionDate is null)
        {
            return;
        }

        //Get game date from date picker, or default of today
        try
        {
            Connection = await _nytService.GetConnection(DateOnly.FromDateTime((DateTime)ConnectionDate));
        }
        catch(Exception e)
        {
            ApiExceptionMessage = e.Message; // Show error to user. Only show error message.
        }

        IsApiDataBeingRetrieved = false;
    }

    private void SelectWord(string word)
    {
        if(Connection is null)
        {
            return;
        }

        SubmitDisabled = false; //Allow submission again
        
        var selectedWord = Connection.Groups.SelectMany(x => x.Words).FirstOrDefault(x => x.Value == word);

        if(selectedWord is null)
        {
            return;
        }

        //Don't allow selection if 4 or more words are already selected and not deselecting (Also don't allow selection if game is over)
        if(Connection.FourWordsSelected && !selectedWord.IsSelected || IsGameOver)
        {
            return;
        }

        selectedWord.IsSelected = !selectedWord.IsSelected;

        StateHasChanged();
    }

    private void DeselectAll()
    {
        if(Connection is null)
        {
            return;
        }
        Connection.Groups.SelectMany(x => x.Words).ToList().ForEach(x => x.IsSelected = false);

        StateHasChanged();
    }

    private void Shuffle()
    {
        if(Connection is null)
        {
            return;
        }
        Connection.ShuffledWordList();
        StateHasChanged();
    }

    public async void Submit()
    {
        if(Connection is null)
        {
            return;
        }
        SubmitDisabled = true; //Prevent double submission

        var selectedWords = Connection.WordList.Where(x => x.IsSelected);

        Guess guess = Guess.FromWords(selectedWords);

        //Verify if words have already been guessed
        if(Guesses.Contains(guess))
        {
            //Show attempted warning
            FlashHint("Already Guessed!");
            return;
        }

        //Add guess to list of guesses for this connection
        Guesses.Add(guess);


        if(guess.IsCorrect) 
        {
            Connection.MarkGroupComplete(guess.Difficulty);

            StateHasChanged();

            if(Connection.HasWon)
            {
                await Task.Delay(2000); //Delay to allow user to see correct guess
                IsGameOver = true;
                StateHasChanged();
            }

            return;
        }
        else if(guess.IsOneOff)
        {
            FlashHint("One Off!");
        }
        else
        {
            FlashHint("Incorrect");
        }

        Connection.Chances -= 1;
        StateHasChanged();


        if(Connection.HasLost)
        {
            await Task.Delay(1000); //Delay to allow user to see incorrect guess

            //Deselect all words
            Connection.Groups.SelectMany(x => x.Words).ToList().ForEach(x => x.IsSelected = false);
            StateHasChanged();

            //Reveal answers
            foreach(var difficulty in Connection.Groups.Select(x => x.Difficulty).Distinct().OrderByDescending(x => x))
            {
                Connection.MarkGroupComplete(difficulty);
                StateHasChanged();
                await Task.Delay(2000);
            }

            IsGameOver = true;
            StateHasChanged();
        }

    }

    async void FlashHint(string hintMessage)
    {
        PopoverMessage = hintMessage;
        IsPopoverOpen = true;

        await Task.Delay(3000);

        IsPopoverOpen = false;
        PopoverMessage = string.Empty;

        StateHasChanged();
    }
    

    async Task ConnectionDateUpdate()
    {
        Guesses.Clear();
        IsGameOver = false;
        IsFinishedConnectionShown = false;

        
        await GetConnection();
        StateHasChanged();
    }


    internal sealed class Guess : IEquatable<Guess>
    {
        public List<Tuple<string, Difficulty>> Words { get; set; } = new(); //Actual order as guessed by user
        private List<Tuple<string, Difficulty>> WordsOrdered => Words.OrderBy(x => x.Item1).ToList(); //Guesses sorted alphabetically for comparison
        public bool IsCorrect => Words.Select(x => x.Item2).Distinct().Count() == 1; //Guess is correct if all words share the same difficulty
        public bool IsOneOff => Words.GroupBy(x => x.Item2).Any(x => x.Count() == 3); 
        public Difficulty Difficulty => Words.First().Item2; //Difficulty of the guess is the first word's difficulty


        public static Guess FromWords(IEnumerable<Word> words)
        {
            var guess = new Guess();
            foreach(var word in words)
            {
                guess.Words.Add(new Tuple<string, Difficulty>(word.Value, word.Difficulty));
            }
            return guess;
        }
        
        public bool Equals(Guess other)
        {
            if(Words.Count != other.Words.Count)
            {
                return false;
            }

            for(int i = 0; i < Words.Count; i++)
            {
                if(WordsOrdered[i].Item1 != other.WordsOrdered[i].Item1)
                {
                    return false;
                }
            }

            return true;
        }
    }
}